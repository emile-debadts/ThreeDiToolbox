# https://github.com/elpaso/qgis-formawarevaluerelationwidget/blob/master/FormAwareValueRelationWidget.py
# https://gis.stackexchange.com/questions/202371/how-to-format-qgis-field-names-on-editor-form
from ThreeDiToolbox.tool_commands.schematisation_checker.view import \
    Ui_SchemaCheckerDialog
from qgis.gui import QgsEditorWidgetWrapper
from qgis.gui import QgsEditorWidgetFactory
from qgis.gui import QgsEditorConfigWidget
from qgis.PyQt.QtWidgets import QWidget
from qgis.PyQt.QtWidgets import QComboBox
from qgis.PyQt.QtWidgets import QTextEdit
from qgis.PyQt.QtWidgets import QDialog
from qgis.PyQt.QtWidgets import QDateEdit


class MyCustomWidget(QgsEditorWidgetWrapper):
    """See https://www.qgis.org/api/classQgsEditorWidgetWrapper.html"""

    def __init__(self, vl, fieldIdx, editor, parent):
        """Create a new widget wrapper.

        :param vl: The layer on which the field is
        :param fieldIdx: The field which will be controlled
        :param editor: An editor widget. Can be nullptr if one should be autogenerated.
        :param parent: A parent widget for this widget wrapper and the created widget.
        """
        self.mComboBox = None
        self.mListWidget = None
        self.mLineEdit = None
        self.mLayer = vl
        self.mFeature = None
        self.mCache = None
        super().__init__(vl, fieldIdx, editor, parent)
        self.key_index = -1
        self.value_index = -1
        self.context = None
        self.expression = None
        # Re-create the cache if the layer is modified
        # self.mLayer.layerModified.connect(self.createCache)
        self.completer_list = None  # Caches completer elements
        self.completer = None  # Store compler instance
        self.editor = editor

    def setValue(self, value):
        """Is called, when the value of the widget needs to be changed.

        Update the widget representation to reflect the new value.

        :param value: The new value of the attribute
        :return: None
        """
        print(f"Updating value {value}")

    def createWidget(self, parent):
        print("createWidget")
        self.mComboBox = QTextEdit(parent)
        # We can also load .ui files:
        # ui = Ui_SchemaCheckerDialog()
        # ui.setupUi(self.mComboBox)
        return self.mComboBox

    def valid(self):
        return True

    def value(self):
        """Will be used to access the widget's value

        :return: The current value the widget represents
        """
        return 'this is my value!'

    # def createWidget(self, parent):
    #     return super().create()


class MyQgsEditorConfigWidget(QgsEditorConfigWidget):
    """See https://www.qgis.org/api/classQgsEditorConfigWidget.html"""

    def __init__(self, vl, fieldIdx, parent):
        """Create a new configuration widget.

        :param vl: The layer for which the configuration dialog will be created
        :param fieldIdx: he index of the field on the layer for which this dialog will be created
        :param parent: A parent widget
        """
        super(MyQgsEditorConfigWidget, self).__init__(vl, fieldIdx, parent)

    def config(self):
        """Create a configuration from the current GUI state.

        :return: A widget configuration
        """
        print("config")
        return {}

    def setConfig(self, config):
        """Update the configuration widget to represent the given configuration

        :param config: The configuration which should be represented by this widget
        :return:
        """
        print("setConfig")
        return None


class MyCustomWidgetFactory(QgsEditorWidgetFactory):
    """See https://www.qgis.org/api/classQgsEditorWidgetFactory.html#details"""

    def __init__(self, name):
        """Constructor

        :param name: A human readable name for this widget type
        """
        super(MyCustomWidgetFactory, self).__init__(name)
        self.wrapper = None
        self.dlg = None

    def configWidget(self, vl, fieldIdx, parent):
        """Create a new configuration widget for this widget type.

        :param vl: The layer for which the widget will be created
        :param fieldIdx: The field index for which the widget will be created
        :param parent: The parent widget of the created config widget
        :return: A configuration widget
        """
        print("MY CUSTOM CONFIGWIDGET FUNCTION")
        self.dlg = MyQgsEditorConfigWidget(vl, fieldIdx, parent)
        return self.dlg

    def create(self, vl, fieldIdx, editor, parent):
        """Create a new editor widget wrapper.

        :param vl: The vector layer on which this widget will act
        :param fieldIdx: The field index on which this widget will act
        :param editor: An editor widget if already existent.
            If nullptr is provided, a new widget will be created
        :param parent: The parent for the wrapper class and any created widget
        :return: A new widget wrapper
        """
        # QgsVectorLayer* vl, int fieldIdx, QWidget* editor, QWidget* parent
        self.wrapper = MyCustomWidget(vl, fieldIdx, editor, parent)
        return self.wrapper


if __name__ == '__main__':
    config_widget = MyQgsEditorConfigWidget()
    print('done')
